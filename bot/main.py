import time
import requests
from bs4 import BeautifulSoup
from telegram import Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω —Ç–∞ ID –∫–∞–Ω–∞–ª—É
TELEGRAM_TOKEN = '7690922097:AAEjmxo9BYyOdlYADSUw1JylKeKrVhM-rOE'
CHANNEL_ID = '@kugisaki_n'

# URL —Å–∞–π—Ç—É HLTV –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É —Ç—É—Ä–Ω—ñ—Ä—ñ–≤
HLTV_URL = 'https://www.hltv.org/matches'

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)

# –ó–º—ñ–Ω–Ω–∞ –¥–ª—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
send_interval = 3 * 60 * 60  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 3 –≥–æ–¥–∏–Ω–∏

def fetch_hltv_matches():
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –º–∞—Ç—á—ñ–≤ —ñ–∑ —Å–∞–π—Ç—É HLTV.org
    """
    response = requests.get(HLTV_URL)
    soup = BeautifulSoup(response.content, 'html.parser')

    matches = []

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–ª–æ–∫–∏ –º–∞—Ç—á—ñ–≤
    match_blocks = soup.find_all('div', class_='upcomingMatch')
    for block in match_blocks:
        try:
            time = block.find('div', class_='matchTime').text.strip()
            teams = block.find_all('div', class_='matchTeamName')
            team1 = teams[0].text.strip() if teams else 'N/A'
            team2 = teams[1].text.strip() if len(teams) > 1 else 'N/A'

            # –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ—Ç–∏–ø—ñ–≤ –∫–æ–º–∞–Ω–¥
            logos = block.find_all('img', class_='matchTeamLogo')
            team1_logo = logos[0]['src'] if logos else ''
            team2_logo = logos[1]['src'] if len(logos) > 1 else ''

            matches.append({
                'time': time,
                'team1': team1,
                'team2': team2,
                'team1_logo': team1_logo,
                'team2_logo': team2_logo,
            })
        except Exception as e:
            print(f"Error parsing match: {e}")

    return matches

def format_match_info(match):
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –º–∞—Ç—á –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —É Telegram
    """
    return (f"üïí *{match['time']}*\n"
            f"üèÜ *{match['team1']}* vs *{match['team2']}*\n"
            f"üñºÔ∏è [–õ–æ–≥–æ—Ç–∏–ø {match['team1']}](https:{match['team1_logo']}) vs [–õ–æ–≥–æ—Ç–∏–ø {match['team2']}](https:{match['team2_logo']})")

def send_matches_to_channel():
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–æ Telegram-–∫–∞–Ω–∞–ª—É
    """
    matches = fetch_hltv_matches()
    if not matches:
        bot.send_message(chat_id=CHANNEL_ID, text="–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–æ–≤—ñ –º–∞—Ç—á—ñ.")
        return

    for match in matches:
        message = format_match_info(match)
        bot.send_message(chat_id=CHANNEL_ID, text=message, parse_mode='Markdown')

def set_interval(update, context):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    """
    global send_interval

    try:
        args = context.args
        if len(args) != 1:
            update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª —É –≥–æ–¥–∏–Ω–∞—Ö. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, /setinterval 2")
            return

        hours = int(args[0])
        if hours <= 0:
            update.message.reply_text("–Ü–Ω—Ç–µ—Ä–≤–∞–ª –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0 –≥–æ–¥–∏–Ω.")
            return

        send_interval = hours * 60 * 60
        update.message.reply_text(f"–Ü–Ω—Ç–µ—Ä–≤–∞–ª —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hours} –≥–æ–¥–∏–Ω.")
    except ValueError:
        update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
    """
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    dispatcher = application.dispatcher

    # –î–æ–¥–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
    dispatcher.add_handler(CommandHandler('setinterval', set_interval))

    application.run_polling()

    while True:
        try:
            send_matches_to_channel()
            time.sleep(send_interval)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–º—ñ–Ω–Ω—É —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
        except Exception as e:
            print(f"Error: {e}")
            time.sleep(60)

if __name__ == "__main__":
    main()
